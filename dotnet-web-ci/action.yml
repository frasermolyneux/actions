name: "dotnet-web-ci"

inputs:
  dotnet-project:
    description: "The .NET project to build and test"
    required: true
  dotnet-version:
    description: "The version of .NET to use"
    required: true
    default: "9.0.x"
  src-folder:
    description: "The folder containing the .NET projects"
    required: true
    default: "src"
  majorMinorVersion:
    description: "The major and minor version of the project"
    required: true
    default: "1.0"
  nugetArtifactName:
    description: "The artifact name for the nuget files"
    required: true
    default: "nuget-packages"
  
runs:
  using: "composite"
  steps:
    - name: Get Build Version
      shell: pwsh
      run: |
        $date = Get-Date
        $version = "${{ inputs.majorMinorVersion }}.${{ github.run_number }}.${{ github.run_attempt }}"
        
        if (-not "${{ github.ref }}".StartsWith("refs/heads/main")) {
          $version = "$version-preview"
        }
        Write-Host "Using build version: $version"
        echo "BUILD_VERSION=$version" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: Setup Package Cache
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
        
    - name: Restore Dependencies
      shell: bash
      run: |
        cd ${{ inputs.src-folder }}
        dotnet restore
      
    - name: Build
      shell: bash
      run: |
        cd ${{ inputs.src-folder }}
        dotnet build --configuration Release -p:Version=$BUILD_VERSION --no-restore
      
    - name: Test
      shell: bash
      run: |
        cd ${{ inputs.src-folder }}
        dotnet test --configuration Release --no-build --verbosity normal --filter FullyQualifiedName!~IntegrationTests

    - name: dotnet publish ${{ inputs.dotnet-project }}
      shell: bash
      run: |
        cd ${{ inputs.src-folder }}
        publish_dir="$RUNNER_TEMP/dotnet-publish/${{ inputs.dotnet-project }}"
        mkdir -p "$publish_dir"
        dotnet publish ${{ inputs.dotnet-project }}/${{ inputs.dotnet-project }}.csproj --configuration Release -p:Version=$BUILD_VERSION --output "$publish_dir"

    - name: Upload artifact ${{ inputs.dotnet-project }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.dotnet-project }}
        path: ${{ runner.temp }}/dotnet-publish/${{ inputs.dotnet-project }}
        if-no-files-found: error
        include-hidden-files: true

    - name: Upload NuGet Packages
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.nugetArtifactName }}
        path: '**/bin/Release/**/*.nupkg'