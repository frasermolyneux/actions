name: "dotnet-func-ci"

inputs:
  dotnet-project:
    description: "The .NET project to build and test"
    required: true
  dotnet-version:
    description: "The version of .NET to use"
    required: true
    default: "7.0.x"
  src-folder:
    description: "The folder containing the .NET projects"
    required: true
    default: "src"
  majorMinorVersion:
    description: "The major and minor version of the project"
    required: true
    default: "1.0"
  
runs:
  using: "composite"
  steps:
    - name: Get Build Version
      shell: pwsh
      run: |
        $version = "${{ inputs.majorMinorVersion }}.${{ github.run_number }}${{ github.run_attempt }}"
        if (-not "${{ github.ref }}".StartsWith("refs/heads/main")) {
          $version = "$version-preview"
        }
        Write-Host "Using build version: $version"
        echo "BUILD_VERSION=$version" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: Setup Package Cache
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
        
    - name: Restore Dependencies
      shell: bash
      run: |
        cd ${{ inputs.src-folder }}
        dotnet restore
      
    - name: Build
      shell: bash
      run: |
        cd ${{ inputs.src-folder }}
        dotnet build --configuration Release -p:Version=$BUILD_VERSION --no-restore

    - name: Test
      shell: bash
      run: |
        cd ${{ inputs.src-folder }}
        dotnet test --configuration Release --no-build --verbosity normal --filter FullyQualifiedName!~IntegrationTests

    - name: Get project artifact path
      shell: pwsh
      run: |
        $netVersionFolder = "${{ inputs.dotnet-version }}".Substring(0, 2)
        $artifactPath = "src/${{ inputs.dotnet-project }}/bin/Release/net$netVersionFolder/"
        Write-Host "Using artifact path: $artifactPath"
        echo "ARTIFACT_PATH=$artifactPath" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

    - name: Upload artifact ${{ inputs.dotnet-project }}
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.dotnet-project }}
        path: 'src/${{ inputs.dotnet-project }}/bin/Release/${{ env.ARTIFACT_PATH }}/'