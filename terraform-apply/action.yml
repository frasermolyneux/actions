name: "terraform-apply"

inputs:
  terraform-folder:
    description: "The folder containing the Terraform projects"
    required: true
    default: "terraform"
    type: string
  terraform-backend-file:
    description: "The backend-file to to be used for the Terraform init (backends/dev.backend.hcl, etc.)"
    required: false
    default: ""
    type: string
  backend-subscription-id:
    description: "The backend subscription_id if the terraform-backend-file is not being used"
    required: false
    type: string
  backend-resource-group-name:
    description: "The backend resource_group_name if the terraform-backend-file is not being used"
    required: false
    type: string
  backend-storage-account-name:
    description: "The backend storage_account_name if the terraform-backend-file is not being used"
    required: false
    type: string
  backend-container-name:
    description: "The backend container_name if the terraform-backend-file is not being used"
    required: false
    default: "tfstate"
    type: string
  backend-key:
    description: "The backend key if the terraform-backend-file is not being used"
    required: false
    default: "terraform.tfstate"
    type: string
  backend-tags:
    description: "The backend tags to be applied to the storage account"
    required: false
    type: string
    default: ""
  plan-file-name:
    description: "The filename of the previously generated plan artifact (binary .tfplan)."
    required: false
    default: "plan.tfplan"
    type: string
  plan-artifact-name:
    description: "The GitHub Actions artifact name that contains the plan file."
    required: false
    default: "terraform-plan"
    type: string
  terraform-additional-apply-args:
    description: "Additional arguments to pass to terraform apply (excluding the plan file)."
    required: false
    default: ""
    type: string
  AZURE_CLIENT_ID:
    description: "The azure client/application ID configured for federated access"
    required: true
    type: string
  AZURE_TENANT_ID:
    description: "The target Azure tenant"
    required: true
    type: string
  AZURE_SUBSCRIPTION_ID:
    description: "The target Azure subscription"
    required: true
    type: string

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v5

    - name: Download Terraform Plan Artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.plan-artifact-name }}
        path: ${{ inputs.terraform-folder }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    - name: Terraform Init
      shell: pwsh
      run: |
        cd ${{ inputs.terraform-folder }}

        $params = @("init")

        if ("${{ inputs.terraform-backend-file }}" -ne "") {
          $params += "-backend-config=${{ inputs.terraform-backend-file }}"
        }

        if ("${{ inputs.backend-subscription-id }}" -ne "") {
          $params += "-backend-config=subscription_id=${{ inputs.backend-subscription-id }}"
        }

        if ("${{ inputs.backend-resource-group-name }}" -ne "") {
          $params += "-backend-config=resource_group_name=${{ inputs.backend-resource-group-name }}"
        }

        if ("${{ inputs.backend-storage-account-name }}" -ne "") {
          $params += "-backend-config=storage_account_name=${{ inputs.backend-storage-account-name }}"
        }

        if ("${{ inputs.backend-container-name }}" -ne "") {
          $params += "-backend-config=container_name=${{ inputs.backend-container-name }}"
        }

        if ("${{ inputs.backend-key }}" -ne "") {
          $params += "-backend-config=key=${{ inputs.backend-key }}"
        }

        if ("${{ inputs.backend-tags }}" -ne "") {
          $params += "-backend-config=tags=${{ inputs.backend-tags }}"
        }

        terraform $params
      env:
        ARM_CLIENT_ID: ${{ inputs.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ inputs.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ inputs.AZURE_TENANT_ID }}
        ARM_USE_AZUREAD: true
        ARM_USE_OIDC: true

    - name: Terraform Apply (from plan)
      shell: bash
      run: |
        set -euo pipefail
        cd "${{ inputs.terraform-folder }}"
        if [ ! -f "${{ inputs.plan-file-name }}" ]; then
          echo "Plan file '${{ inputs.plan-file-name }}' not found in $PWD" >&2
          ls -al
          exit 1
        fi
        echo "Applying plan file ${{ inputs.plan-file-name }}"
        terraform apply -auto-approve ${{ inputs.terraform-additional-apply-args }} "${{ inputs.plan-file-name }}"
      env:
        ARM_CLIENT_ID: ${{ inputs.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ inputs.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ inputs.AZURE_TENANT_ID }}
        ARM_USE_AZUREAD: true
        ARM_USE_OIDC: true
